// In this task an attribute is displayed. The model has to provide an item with this attribute.

define task attribute {
	initial-skills: (attribute)
    opc: t // operator compilation
    explore-exploit: 0.1

    ans: 0.2 //Activation noise
  	ol: t //optimized version (Base-level activation)
  	default-activation: 1.0 //Base-level activation
  	bll: 0.5 //base-level decay

  	// Spread activation from goals
  	default-operator-assoc: 4.0
  	goal-operator-learning: t
  	operator-bll: nil
  	beta: 0.1
  	reward: 10.0

  	//Inter operators learning
  	default-inter-operator-assoc: 0.0
  	default-operator-self-assoc: 0.0
 	inter-operator-learning: nil

  	//Spread activation from chunks
 	goal-chunk-spreads: nil
  	ga: 1.0
  	input-activation: 2.0
  	retrieval-activation: 4.0
  	imaginal-activation: 0.0
  	mas: 3.0

    //Retrieval duration
  	lf: 0.2 //latency factor F
  	rt: -2.0 //retrieval threshold Tau
}

define goal primitives {

operator V1toRT1 {
  V1 <> nil
==>
    V1 -> RT1
}

operator V1toRT2 {
  V1 <> nil
==>
    V1 -> RT2
}

operator V1toRT3 {
  V1 <> nil
==>
    V1 -> RT3
}


operator V2toRT1 {
  V2 <> nil
==>
    V2 -> RT1
}

operator V2toRT2 {
  V2 <> nil
==>
    V2 -> RT2
}

operator V2toRT3 {
  V2 <> nil
==>
    V2 -> RT3
}

operator RT1toAC1 {
  RT1 <> nil
==>
  action -> AC1
  RT1 -> AC2
}

operator RT2toAC1 {
  RT2 <> nil
==>
  action -> AC1
  RT2 -> AC2
}

operator RT3toAC1 {
  RT3 <> nil
==>
  action -> AC1
  RT3 -> AC2
}


operator RT2toRT1 {
  RT2 <> nil
==>
  RT2 -> RT1
}

operator RT3toRT2 {
  RT3 <> nil
==>
  RT3 -> RT2
}
  
operator V1toWM1 {
  V1 <> nil
  WM1 = nil
==>
   V1 -> WM1
}

operator V2toWM1 {
  V2 <> nil
  WM1 = nil
==>
   V2 -> WM1
}

operator RT2toWM1 {
  RT2 <> nil
  WM1 = nil
==>
  RT2 -> WM1
}

operator RT3toWM1 {
  RT3 <> nil
  WM1 = nil
==>
  RT3 -> WM1
}

operator WM1toRT1 {
  RT1 = nil
  WM1 <> nil
==>
    WM1 -> RT1
//    nil -> WM1
}

operator WM1toRT2 {
  RT2 = nil
  WM1 <> nil
==>
    WM1 -> RT2
//    nil -> WM1
}

operator WM1toRT3 {
  RT3 = nil
  WM1 <> nil
==>
    WM1 -> RT3
//    nil -> WM1
}

operator WM1toAC1 {
  WM1 <> nil
==>
  action -> AC1
    WM1 -> AC2
//    nil -> WM1
}


operator C1toRT1 {
  G1 <> nil
==>
  *fact-type -> RT1
}

operator C1altToRT1 {
  G1 <> nil
==>
  *fact-type-two -> RT1
}

operator RT1equalC1 {
  RT1 = *fact-type
==>
}

operator RT1equalC1alt {
  RT1 = *fact-type-two
==>
}

// Operators that implement multiple states

operator stage1 {
  G2 = state-one
  ==>
  state-two -> G2
}
  
operator stage2 {
  G2 = state-two
  ==>
  state-three -> G2
}

// Operators that model a transition to a new goal

// We keep the old goal in G1 to ensure credit assignment is maintained

operator next-goal {
  G1 <> nil
  G2 = nil
==>
  *next-goal-type -> G2
}


}


define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}

define facts {
  (dolphin a z)
  (starfish b z)
  (sardine c z)
  (cat d z)
  (butterfly e z)
  (ant f z)
  (bat g z)
  (pigeon h z)
}

define facts {
  (s1 property dolphin marine-animal)
  (d6 distinctive ocean marine-animal)
  (s2 property starfish marine-animal)
  (s3 property sardine marine-animal)
  (sol1 property cat solitary)
  (d5 distinctive alone solitary)
  (sol2 property butterfly solitary)
  (sol3 property ant social)
  (d4 distinctive group social)
  (sol4 property sardine social)
  (m1 property cat mammal)
  (m2 property dolphin mammal)
  (m3 property bat mammal)
  (d1 distinctive suckle mammal)
  (fl1 property bat fly)
  (d3 distinctive wing fly)
  (fl2 property butterfly fly)
  (fl3 property pigeon fly)
  (i1 property butterfly insect)
  (i2 property ant insect)
  (d2 distinctive 6-legs insect)
}


define init-script {
	set-graph-title("Accuracy")
	set-average-window(20)
}


define script {
	trial-start()
	set-goal("attribute",["fact-type","property"])

	stimuli = ["marine-animal", "mammal", "social", "solitary", "fly", "insect"]

	responses = [["dolphin", "starfish", "sardine"], ["cat", "bat", "dolphin"], ["ant", "sardine"], ["cat", "butterfly"], ["bat", "butterfly", "pigeon"],  ["butterfly", "ant"] ]
    
    pair = random(6)
	
    print("Example of", stimuli[pair])
    screen(stimuli[pair])
    run-step()
    screen("nil")
  
    run-until-relative-time-or-action(10.0, "action")
    ac = last-action()

    if (ac[0] != "action") {
		issue-reward(-1)
		print("Out of time or Illegal action.")
		plot-point(0)
		}

	response = responses[pair]
	len = length(response)-1
	end = 0

	if (length(ac) == 2) {
		for i in 0 to len {
			if (ac[1] == response[i]) {
				end = end + 1
				issue-reward()
				print(response[i], "Correct!")
				plot-point(1)
			}
		}
		if (end == 0){
			issue-reward(-1)
			print("Wrong")
			plot-point(0)
		}

	}

    trial-end()
    sleep(5.0)
}