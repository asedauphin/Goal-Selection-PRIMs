// In this task a living thing is displayed. The model has to decide whether is a plant
// or an animal, and has to press left for an animal, and right for a plant.

define task category {
    initial-skills: (category)
    opc: t // operator compilation
    explore-exploit: 0.1

    ans: 0.2 //Activation noise
  	ol: t //optimized version (Base-level activation)
  	default-activation: 1.0 //Base-level activation
  	bll: 0.5 //base-level decay

  	// Spread activation from goals
  	default-operator-assoc: 4.0
  	goal-operator-learning: t
  	operator-bll: nil
  	beta: 0.1
  	reward: 10.0 //can be task dependent 

  	//Inter operators learning
  	default-inter-operator-assoc: 0.0
  	default-operator-self-assoc: 0.0
 	inter-operator-learning: nil

  	//Spread activation from chunks
 	goal-chunk-spreads: nil
  	ga: 1.0
  	input-activation: 2.0
  	retrieval-activation: 4.0
  	imaginal-activation: 0.0
  	mas: 3.0

    //Retrieval duration
  	lf: 0.2 //latency factor F
  	rt: -2.0 //retrieval threshold Tau
}


define goal primitives {

operator V1toRT1 {
  V1 <> nil
==>
    V1 -> RT1
}

operator V1toRT2 {
  V1 <> nil
==>
    V1 -> RT2
}

operator V1toRT3 {
  V1 <> nil
==>
    V1 -> RT3
}


operator V2toRT1 {
  V2 <> nil
==>
    V2 -> RT1
}

operator V2toRT2 {
  V2 <> nil
==>
    V2 -> RT2
}

operator V2toRT3 {
  V2 <> nil
==>
    V2 -> RT3
}

operator RT1toAC1 {
  RT1 <> nil
==>
  action -> AC1
  RT1 -> AC2
}

operator RT2toAC1 {
  RT2 <> nil
==>
  action -> AC1
  RT2 -> AC2
}

operator RT3toAC1 {
  RT3 <> nil
==>
  action -> AC1
  RT3 -> AC2
}


operator RT2toRT1 {
  RT2 <> nil
==>
  RT2 -> RT1
}

operator RT3toRT2 {
  RT3 <> nil
==>
  RT3 -> RT2
}
  
operator V1toWM1 {
  V1 <> nil
  WM1 = nil
==>
   V1 -> WM1
}

operator V2toWM1 {
  V2 <> nil
  WM1 = nil
==>
   V2 -> WM1
}

operator RT2toWM1 {
  RT2 <> nil
  WM1 = nil
==>
  RT2 -> WM1
}

operator RT3toWM1 {
  RT3 <> nil
  WM1 = nil
==>
  RT3 -> WM1
}

operator WM1toRT1 {
  RT1 = nil
  WM1 <> nil
==>
    WM1 -> RT1
//    nil -> WM1
}

operator WM1toRT2 {
  RT2 = nil
  WM1 <> nil
==>
    WM1 -> RT2
//    nil -> WM1
}

operator WM1toRT3 {
  RT3 = nil
  WM1 <> nil
==>
    WM1 -> RT3
//    nil -> WM1
}

operator WM1toAC1 {
  WM1 <> nil
==>
  action -> AC1
    WM1 -> AC2
//    nil -> WM1
}


operator C1toRT1 {
  G1 <> nil
==>
  *fact-type -> RT1
}

operator C1altToRT1 {
  G1 <> nil
==>
  *fact-type-two -> RT1
}

operator RT1equalC1 {
  RT1 = *fact-type
==>
}

operator RT1equalC1alt {
  RT1 = *fact-type-two
==>
}

// Operators that implement multiple states

operator stage1 {
  G2 = state-one
  ==>
  state-two -> G2
}
  
operator stage2 {
  G2 = state-two
  ==>
  state-three -> G2
}

// Operators that model a transition to a new goal

// We keep the old goal in G1 to ensure credit assignment is maintained

operator next-goal {
  G1 <> nil
  G2 = nil
==>
  *next-goal-type -> G2
}


}


define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}
define facts {
  (plant d x)
  (animal y x)
  (goat z x)
  (pinguin u x)
  (cabbage q x)
  (tulip r x)
  (livingthing s x)
  (mania t x)
  (food u x)
  (notfly v x)
  (left w x)
  (right x x)
  
}


define facts {
  (fac1 category goat animal)
  (fac2 category pinguin animal)
  (fac3 category cabbage plant)
  (fac4 category tulip plant)
  (altfac1 property goat hair)
  (altfac2 property pinguin notfly)
  (altfac3 property cabbage food)
  (altfac4 property tulip mania)
  (fca1 response animal left)
  (fca2 response plant right)
  (fca3 response somethingelse middle)
  (fca4 response differentyet upper)
  (fca5 response noguessing lower)
  (altfca1 property animal livingthing)
  (altfca2 property plant livingthing)
}


define init-script {
	set-graph-title("Accuracy")
	set-average-window(20)
}


define script {
	trial-start()
	set-goal("category",["fact-type","category"],["fact-type-two","response"])

	stimuli = ["goat", "pinguin", "cabbage", "tulip"]
	responses = ["left", "left", "right","right"]
    pair = random(4)
	
    print("Testing",stimuli[pair],"and",responses[pair])
    screen(stimuli[pair])
    run-step()
    screen("nil")
    run-until-relative-time-or-action(5.0, "action")
    ac = last-action()
    if (ac[0] != "action") {
		issue-reward(-1)
		print("Out of time or Illegal action.")
		plot-point(0)
	}  else {	
		if (ac[1] == responses[pair]) {
			issue-reward()
			print("Correct!")
			plot-point(1)
		} else {
			issue-reward(-1)
			print("Wrong")
			plot-point(0)
		}   
	}
    trial-end()
    sleep(5.0)
}